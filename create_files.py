import os

# Data with file names and comments (You will add the dictionaries for each category like Beginner_Programs, Intermediate_Programs, etc.)
programs = {
    "Beginner_Programs": {
    "factorial.py": "# Program to calculate the factorial of a number.\n# Factorial is the product of all positive integers less than or equal to the number.\n# Example: 5! = 5 * 4 * 3 * 2 * 1 = 120",
    "check_prime.py": "# Program to check if a number is prime.\n# A prime number is a number greater than 1 that has no positive divisors other than 1 and itself.\n# Example: 7 is prime, but 8 is not.",
    "fibonacci.py": "# Program to print the Fibonacci sequence.\n# Each number in the Fibonacci sequence is the sum of the two preceding ones, starting from 0 and 1.\n# Example: 0, 1, 1, 2, 3, 5, 8, 13...",
    "palindrome.py": "# Program to check if a number or string is a palindrome.\n# A palindrome reads the same backward as forward.\n# Example: 'madam' is a palindrome, but 'hello' is not.",
    "armstrong.py": "# Program to check if a number is an Armstrong number.\n# An Armstrong number is one where the sum of its digits each raised to the power of the number of digits equals the number itself.\n# Example: 153 is an Armstrong number.",
    "reverse_string.py": "# Program to reverse a string.\n# This program reverses the characters of a given string.\n# Example: 'hello' becomes 'olleh'.",
    "sum_of_digits.py": "# Program to calculate the sum of digits of a number.\n# The sum is calculated by adding all the individual digits of a number.\n# Example: For 123, the sum is 1 + 2 + 3 = 6.",
    "gcd.py": "# Program to find the greatest common divisor (GCD) of two numbers.\n# GCD is the largest number that divides both numbers without leaving a remainder.\n# Example: The GCD of 12 and 15 is 3.",
    "calculator.py": "# Program to implement a basic calculator.\n# The calculator can perform addition, subtraction, multiplication, and division operations.\n# Example: 5 + 3 = 8.",
    "leap_year.py": "# Program to check if a year is a leap year.\n# A leap year occurs every 4 years, except for years divisible by 100, unless they are divisible by 400.\n# Example: 2020 is a leap year, but 1900 is not.",
    "binary_to_decimal.py": "# Program to convert a binary number to decimal.\n# This converts a binary number (base 2) to its decimal equivalent (base 10).\n# Example: Binary 1010 is Decimal 10.",
    "decimal_to_binary.py": "# Program to convert a decimal number to binary.\n# This converts a decimal number (base 10) to its binary equivalent (base 2).\n# Example: Decimal 10 is Binary 1010.",
    "largest_in_list.py": "# Program to find the largest number in a list.\n# This program compares each element in the list to find the largest number.\n# Example: The largest number in [3, 5, 1] is 5.",
    "smallest_in_list.py": "# Program to find the smallest number in a list.\n# This program compares each element in the list to find the smallest number.\n# Example: The smallest number in [3, 5, 1] is 1.",
    "count_vowels.py": "# Program to count the number of vowels in a string.\n# The program counts how many vowels (a, e, i, o, u) are present in the string.\n# Example: 'hello' has 2 vowels.",
    "sort_list.py": "# Program to sort a list of numbers in ascending order.\n# The program arranges the elements in increasing order.\n# Example: [3, 1, 4] becomes [1, 3, 4].",
    "perfect_number.py": "# Program to check if a number is a perfect number.\n# A perfect number is a number that is equal to the sum of its proper divisors.\n# Example: 6 is a perfect number (1 + 2 + 3 = 6).",
    "strong_number.py": "# Program to check if a number is a strong number.\n# A strong number is a number where the sum of the factorials of its digits equals the number itself.\n# Example: 145 is a strong number.",
    "sum_of_natural_numbers.py": "# Program to calculate the sum of first N natural numbers.\n# The sum is calculated as N * (N + 1) / 2.\n# Example: The sum of the first 5 natural numbers is 15.",
    "lcm.py": "# Program to calculate the least common multiple (LCM) of two numbers.\n# LCM is the smallest number that both numbers divide evenly into.\n# Example: The LCM of 4 and 5 is 20.",
    "random_number.py": "# Program to generate a random number.\n# The program generates a random number within a specified range.\n# Example: A random number between 1 and 10 could be 7.",
    "automorphic_number.py": "# Program to check if a number is an automorphic number.\n# An automorphic number is a number whose square ends with the number itself.\n# Example: 25 is an automorphic number (25^2 = 625).",
    "count_characters.py": "# Program to count the number of characters in a string.\n# The program counts how many characters (including spaces) are in the string.\n# Example: 'hello' has 5 characters.",
    "harshad_number.py": "# Program to check if a number is a Harshad number.\n# A Harshad number is divisible by the sum of its digits.\n# Example: 18 is a Harshad number (18 / (1+8) = 2).",
    "power_of_number.py": "# Program to calculate the power of a number.\n# The program calculates the number raised to a given power.\n# Example: 2 raised to the power of 3 is 8.",
    "remove_duplicates.py": "# Program to remove duplicates from a list.\n# The program creates a new list containing only the unique elements from the original list.\n# Example: [1, 2, 2, 3] becomes [1, 2, 3].",
    "anagram_checker.py": "# Program to check if two strings are anagrams.\n# Anagrams are words that have the same letters in a different order.\n# Example: 'listen' and 'silent' are anagrams.",
    "multiplication_table.py": "# Program to print the multiplication table of a number.\n# The program prints the multiples of the given number.\n# Example: The multiplication table for 3 is 3, 6, 9, 12...",
    "second_largest.py": "# Program to find the second largest number in a list.\n# The program compares the numbers and identifies the second largest one.\n# Example: The second largest in [10, 20, 30] is 20.",
    "abundant_number.py": "# Program to check if a number is an abundant number.\n# An abundant number is a number whose sum of proper divisors is greater than the number itself.\n# Example: 12 is an abundant number (1 + 2 + 3 + 4 + 6 = 16 > 12).",
    "count_words.py": "# Program to count the number of words in a string.\n# The program splits the string by spaces and counts how many words are present.\n# Example: 'Hello world' has 2 words.",
    "ascii_value.py": "# Program to print the ASCII value of a character.\n# The program converts the character to its corresponding ASCII value.\n# Example: The ASCII value of 'A' is 65.",
    "celsius_to_fahrenheit.py": "# Program to convert Celsius to Fahrenheit.\n# The formula for conversion is (Celsius * 9/5) + 32 = Fahrenheit.\n# Example: 25°C is 77°F.",
    "fahrenheit_to_celsius.py": "# Program to convert Fahrenheit to Celsius.\n# The formula for conversion is (Fahrenheit - 32) * 5/9 = Celsius.\n# Example: 77°F is 25°C.",
    "spy_number.py": "# Program to check if a number is a spy number.\n# A spy number is a number where the sum of its digits equals the product of its digits.\n# Example: 123 is a spy number (1 + 2 + 3 = 1 * 2 * 3).",
    "circle_area.py": "# Program to calculate the area of a circle.\n# The formula for the area of a circle is π * r².\n# Example: The area of a circle with radius 3 is 28.27.",
    "rectangle_area.py": "# Program to calculate the area of a rectangle.\n# The formula for the area of a rectangle is length * width.\n# Example: The area of a rectangle with length 5 and width 4 is 20.",
    "triangle_area.py": "# Program to calculate the area of a triangle.\n# The formula for the area of a triangle is 1/2 * base * height.\n# Example: The area of a triangle with base 6 and height 4 is 12.",
    "find_factors.py": "# Program to find all factors of a number.\n# The program calculates all divisors of a given number.\n# Example: The factors of 12 are 1, 2, 3, 4, 6, 12.",
    "perfect_square.py": "# Program to check if a number is a perfect square.\n# A perfect square is a number that is the square of an integer.\n# Example: 16 is a perfect square (4 * 4 = 16).",
    "count_digits.py": "# Program to count the number of digits in a number.\n# The program counts how many digits the number has.\n# Example: 12345 has 5 digits.",
    "reverse_number.py": "# Program to reverse the digits of a number.\n# The program reverses the digits of the given number.\n# Example: 12345 becomes 54321.",
    "sum_of_squares.py": "# Program to calculate the sum of the squares of the digits of a number.\n# The sum is calculated by squaring each digit and adding them up.\n# Example: The sum of squares of digits of 12 is 1² + 2² = 5.",
    "hcf.py": "# Program to calculate the highest common factor (HCF) of two numbers.\n# HCF is the largest number that divides both numbers.\n# Example: The HCF of 12 and 15 is 3.",
    "neon_number.py": "# Program to check if a number is a neon number.\n# A neon number is a number where the sum of the digits of its square is equal to the number itself.\n# Example: 9 is a neon number (9² = 81 and 8 + 1 = 9).",
    "median.py": "# Program to find the median of a list of numbers.\n# The median is the middle value when the numbers are sorted.\n# Example: The median of [1, 3, 2] is 2.",
    "mode.py": "# Program to find the mode of a list of numbers.\n# The mode is the number that appears most frequently in the list.\n# Example: The mode of [1, 2, 2, 3] is 2.",
    "pangram_checker.py": "# Program to check if a string is a pangram.\n# A pangram is a sentence that contains every letter of the alphabet at least once.\n# Example: 'The quick brown fox jumps over the lazy dog' is a pangram.",
    "sum_even_numbers.py": "# Program to calculate the sum of even numbers in a list.\n# The program adds up all the even numbers in the list.\n# Example: The sum of even numbers in [1, 2, 3, 4] is 6.",
    "sum_odd_numbers.py": "# Program to calculate the sum of odd numbers in a list.\n# The program adds up all the odd numbers in the list.\n# Example: The sum of odd numbers in [1, 2, 3, 4] is 4.",
    "unique_elements.py": "# Program to find unique elements in a list.\n# The program returns a new list with only the unique elements from the original list.\n# Example: The unique elements of [1, 2, 2, 3] are [1, 2, 3]."
  },
    "Intermediate_Programs": {
    "matrix_addition.py": "# Program to add two matrices.\n# Matrix addition is the element-wise addition of two matrices of the same size.\n# Example: A = [[1, 2], [3, 4]], B = [[5, 6], [7, 8]], A + B = [[6, 8], [10, 12]].\n",
    "matrix_multiplication.py": "# Program to multiply two matrices.\n# Matrix multiplication is the dot product of rows and columns of two matrices.\n# Example: A = [[1, 2], [3, 4]], B = [[5, 6], [7, 8]], A * B = [[19, 22], [43, 50]].\n",
    "binary_search.py": "# Program to perform binary search on a sorted list.\n# Binary search works by repeatedly dividing the search interval in half.\n# Example: Searching for 7 in [1, 2, 3, 4, 5, 6, 7], result: Index 6.\n",
    "merge_sort.py": "# Program to implement merge sort.\n# Merge sort is a divide-and-conquer algorithm that divides the list into halves and sorts them.\n# Example: Sorting [4, 2, 7, 1] results in [1, 2, 4, 7].\n",
    "quick_sort.py": "# Program to implement quick sort.\n# Quick sort is a divide-and-conquer algorithm that selects a pivot and partitions the array.\n# Example: Sorting [4, 2, 7, 1] results in [1, 2, 4, 7].\n",
    "heap_sort.py": "# Program to implement heap sort.\n# Heap sort is a comparison-based sorting algorithm that uses a binary heap data structure.\n# Example: Sorting [4, 2, 7, 1] results in [1, 2, 4, 7].\n",
    "linear_search.py": "# Program to perform linear search on a list.\n# Linear search checks each element in the list sequentially.\n# Example: Searching for 7 in [1, 2, 3, 4, 5, 6, 7], result: Index 6.\n",
    "string_permutations.py": "# Program to generate all permutations of a string.\n# A permutation is a rearrangement of the characters in a string.\n# Example: Permutations of 'abc' are ['abc', 'acb', 'bac', 'bca', 'cab', 'cba'].\n",
    "merge_two_lists.py": "# Program to merge two sorted lists into one sorted list.\n# Merging involves comparing the smallest unmerged elements of each list.\n# Example: Merging [1, 3, 5] and [2, 4, 6] results in [1, 2, 3, 4, 5, 6].\n",
    "longest_palindrome.py": "# Program to find the longest palindromic substring in a string.\n# A palindrome is a word or sequence that reads the same forward and backward.\n# Example: Longest palindrome in 'babad' is 'bab'.\n",
    "check_subsequence.py": "# Program to check if one string is a subsequence of another.\n# A subsequence is a sequence derived by deleting some or no elements without changing the order.\n# Example: 'abc' is a subsequence of 'aebdc'.\n",
    "generate_combinations.py": "# Program to generate all combinations of a string.\n# Combinations are different ways to select elements from a collection, without regard to the order.\n# Example: Combinations of 'abc' are ['a', 'b', 'c', 'ab', 'ac', 'bc', 'abc'].\n",
    "rotate_matrix.py": "# Program to rotate a matrix by 90 degrees.\n# Matrix rotation involves rotating the elements of the matrix in a clockwise direction.\n# Example: Rotating [[1, 2], [3, 4]] gives [[3, 1], [4, 2]].\n",
    "transpose_matrix.py": "# Program to transpose a matrix.\n# Transposing a matrix involves swapping its rows and columns.\n# Example: Transpose of [[1, 2], [3, 4]] is [[1, 3], [2, 4]].\n",
    "largest_sum_subarray.py": "# Program to find the largest sum of a contiguous subarray.\n# This problem can be solved using Kadane's algorithm.\n# Example: Largest sum subarray in [1, -2, 3, 4, -1] is 7.\n",
    "longest_common_subsequence.py": "# Program to find the longest common subsequence of two strings.\n# A subsequence is a sequence derived by deleting some or no elements without changing the order.\n# Example: LCS of 'abc' and 'ac' is 'ac'.\n",
    "knapsack_problem.py": "# Program to solve the 0/1 knapsack problem.\n# The knapsack problem involves maximizing the total value while staying within a weight limit.\n# Example: Given items with weights [2, 3, 4] and values [3, 4, 5], and a knapsack capacity of 5, the max value is 7.\n",
    "tower_of_hanoi.py": "# Program to solve the Tower of Hanoi puzzle.\n# The Tower of Hanoi involves moving disks between three rods following specific rules.\n# Example: Moving 3 disks from A to C using B as auxiliary.\n",
    "sudoku_solver.py": "# Program to solve a Sudoku puzzle.\n# Sudoku solving involves filling a 9x9 grid with digits 1 to 9 according to specific rules.\n# Example: Solving a partially filled grid to get the complete solution.\n",
    "n_queens_problem.py": "# Program to solve the N-Queens problem.\n# The N-Queens problem involves placing N queens on an N x N chessboard such that no two queens threaten each other.\n# Example: Solution for N=4 is a 4x4 board with queens placed at certain positions.\n",
    "max_heap.py": "# Program to implement a max heap data structure.\n# A max heap is a binary tree where the parent node is greater than or equal to its children.\n# Example: A max heap for [3, 5, 9, 2, 4] gives a tree structure with 9 at the root.\n",
    "min_heap.py": "# Program to implement a min heap data structure.\n# A min heap is a binary tree where the parent node is less than or equal to its children.\n# Example: A min heap for [3, 5, 9, 2, 4] gives a tree structure with 2 at the root.\n",
    "binary_tree_traversal.py": "# Program to traverse a binary tree.\n# Binary tree traversal involves visiting all nodes in a specific order (inorder, preorder, postorder).\n# Example: Traversing a tree with root 1, left child 2, right child 3.\n",
    "graph_dfs.py": "# Program to perform depth-first search (DFS) on a graph.\n# DFS explores as far as possible along each branch before backtracking.\n# Example: DFS on a graph with nodes 1, 2, 3, 4 results in visiting nodes in a specific order.\n",
    "graph_bfs.py": "# Program to perform breadth-first search (BFS) on a graph.\n# BFS explores all the neighbors at the present depth level before moving on to nodes at the next depth level.\n# Example: BFS on a graph with nodes 1, 2, 3, 4 results in visiting nodes level by level.\n",
    "detect_cycle_in_graph.py": "# Program to detect a cycle in a directed or undirected graph.\n# Cycle detection checks if there is a path that leads back to the starting node.\n# Example: Cycle detected in a graph with nodes 1, 2, 3 where 3 -> 1 forms a cycle.\n",
    "shortest_path_dijkstra.py": "# Program to find the shortest path between two nodes in a graph using Dijkstra's algorithm.\n# Dijkstra's algorithm finds the shortest path from the source node to all other nodes.\n# Example: Shortest path from node 1 to node 5 in a weighted graph.\n",
    "shortest_path_bellman_ford.py": "# Program to find the shortest path between two nodes in a graph using Bellman-Ford algorithm.\n# Bellman-Ford algorithm handles negative weights and finds the shortest path.\n# Example: Shortest path from node 1 to node 5 in a graph with negative edges.\n",
    "longest_path_dag.py": "# Program to find the longest path in a Directed Acyclic Graph (DAG).\n# The longest path problem in a DAG can be solved using dynamic programming.\n# Example: Longest path from node 1 to node 4 in a DAG.\n",
    "kruskal_algorithm.py": "# Program to find the minimum spanning tree using Kruskal's algorithm.\n# Kruskal's algorithm sorts all the edges and picks the smallest edge that does not form a cycle.\n# Example: Finding the minimum spanning tree for a graph with weighted edges.\n",
    "prim_algorithm.py": "# Program to find the minimum spanning tree using Prim's algorithm.\n# Prim's algorithm grows the spanning tree from a starting node by adding the shortest edge.\n# Example: Finding the minimum spanning tree for a graph with weighted edges.\n",
    "graph_adjacency_list.py": "# Program to represent a graph using an adjacency list.\n# An adjacency list stores the graph as a list of lists, with each list representing the neighbors of a node.\n# Example: Representing a graph with nodes and edges in adjacency list form.\n",
    "graph_adjacency_matrix.py": "# Program to represent a graph using an adjacency matrix.\n# An adjacency matrix is a 2D array that represents the graph, where the value at [i][j] indicates an edge between nodes i and j.\n# Example: Representing a graph with nodes and edges in adjacency matrix form.\n",
    "floyd_warshall.py": "# Program to find the shortest paths between all pairs of nodes in a graph using Floyd-Warshall algorithm.\n# Floyd-Warshall is a dynamic programming algorithm to find shortest paths in a weighted graph.\n# Example: Finding shortest paths between all nodes in a weighted graph.\n",
    "count_islands.py": "# Program to count the number of islands in a 2D grid.\n# An island is a group of connected 1's in the grid.\n# Example: Counting the number of islands in a 2D grid of 0's and 1's.\n",
    "longest_substring.py": "# Program to find the longest substring without repeating characters.\n# This problem can be solved using a sliding window technique.\n# Example: Longest substring in 'abcabcbb' is 'abc'.\n",
    "count_inversions.py": "# Program to count the number of inversions in an array.\n# An inversion is a pair of elements where the larger element appears before the smaller one.\n# Example: Array [1, 3, 2, 3, 1] has 4 inversions.\n",
    "subarray_sum.py": "# Program to find a subarray with a given sum.\n# This problem can be solved using a sliding window technique.\n# Example: Subarray with sum 7 in [2, 1, 3, 5] is [2, 1, 3].\n",
    "longest_increasing_subsequence.py": "# Program to find the longest increasing subsequence in an array.\n# Longest increasing subsequence is the longest subsequence of elements in increasing order.\n# Example: LIS in [10, 9, 2, 5, 3, 7, 101, 18] is [2, 3, 7, 101].\n",
    "merge_intervals.py": "# Program to merge overlapping intervals.\n# Merging intervals involves combining intervals that overlap into one.\n# Example: Merging [(1, 3), (2, 4), (5, 7)] results in [(1, 4), (5, 7)].\n",
    "string_match.py": "# Program to check if a string contains another string.\n# String matching checks if the second string is a substring of the first.\n# Example: 'abc' contains 'bc'.\n",
    "knight_tour.py": "# Program to solve the Knight's Tour problem.\n# The Knight's Tour involves moving a knight on a chessboard visiting all squares exactly once.\n# Example: Finding a solution where the knight visits all squares on an 8x8 chessboard.\n",
    "job_scheduling.py": "# Program to solve the job scheduling problem.\n# Job scheduling involves selecting jobs to maximize profit while respecting deadlines.\n# Example: Scheduling jobs with deadlines and profits.\n",
    "edit_distance.py": "# Program to find the edit distance between two strings.\n# Edit distance is the minimum number of operations (insert, delete, replace) required to convert one string to another.\n# Example: Edit distance between 'kitten' and 'sitting' is 3.\n",
    "matrix_chain_multiplication.py": "# Program to solve the matrix chain multiplication problem.\n# Matrix chain multiplication involves determining the most efficient way to multiply matrices.\n# Example: Solving for optimal multiplication order in a sequence of matrices.\n",
    "longest_common_prefix.py": "# Program to find the longest common prefix among a list of strings.\n# The longest common prefix is the longest substring shared by all strings.\n# Example: Longest common prefix in ['flower', 'flow', 'flight'] is 'fl'.\n",
    "find_majority_element.py": "# Program to find the majority element in an array.\n# Majority element appears more than n/2 times in the array.\n# Example: Majority element in [3, 3, 4, 2, 4, 4, 2, 4, 4] is 4.\n",
    "balanced_parentheses.py": "# Program to check if parentheses are balanced in an expression.\n# An expression has balanced parentheses if each opening parenthesis has a corresponding closing one.\n# Example: '({[]})' is balanced, '([)]' is not.\n"
  },
    "Advanced_Programs": {
    "binary_tree_diameter.py": "# Program to find the diameter of a binary tree.\n# The diameter of a tree is the longest path between any two nodes.\n# Example: Diameter of a tree with nodes 1, 2, 3, 4, 5 is 3 (path: 4 -> 2 -> 1 -> 3).\n",
    "bfs_shortest_path.py": "# Program to find the shortest path in an unweighted graph using BFS.\n# BFS finds the shortest path by exploring neighbors level by level.\n# Example: Shortest path from node 1 to node 5 in a graph using BFS.\n",
    "dijkstra_algorithm.py": "# Program to find the shortest path in a weighted graph using Dijkstra's algorithm.\n# Dijkstra's algorithm finds the shortest path from a source node to all other nodes.\n# Example: Shortest path from node 1 to node 5 in a weighted graph using Dijkstra.\n",
    "find_saddle_point.py": "# Program to find the saddle point in a matrix.\n# A saddle point is an element that is the minimum in its row and the maximum in its column.\n# Example: Saddle point in matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]] is 5.\n",
    "graph_colorability.py": "# Program to check the colorability of a graph.\n# A graph is colorable if it's possible to color the nodes such that no two adjacent nodes have the same color.\n# Example: Colorable graph with 3 colors for a bipartite graph.\n",
    "topological_sort.py": "# Program to perform topological sort on a directed acyclic graph (DAG).\n# Topological sorting orders the nodes such that for every directed edge u -> v, u comes before v.\n# Example: Topological sort of a DAG with nodes 1, 2, 3, 4.\n",
    "min_cost_path.py": "# Program to find the minimum cost path in a matrix.\n# Minimum cost path is the least cost path from the top-left corner to the bottom-right corner.\n# Example: Path from (0, 0) to (n-1, m-1) with minimal cost.\n",
    "matrix_rotation.py": "# Program to rotate a matrix by 90 degrees clockwise.\n# Rotation involves shifting the elements of the matrix in a circular pattern.\n# Example: Rotating matrix [[1, 2], [3, 4]] results in [[3, 1], [4, 2]].\n",
    "longest_palindrome_subsequence.py": "# Program to find the longest palindromic subsequence.\n# A subsequence is a sequence derived by deleting some or no elements without changing the order.\n# Example: LPS of 'bbabcbab' is 'babab'.\n",
    "find_cycle_in_directed_graph.py": "# Program to detect a cycle in a directed graph.\n# A cycle exists if there is a path from a node to itself.\n# Example: Cycle detected in a directed graph with edges 1 -> 2, 2 -> 3, 3 -> 1.\n",
    "sparse_matrix.py": "# Program to represent a sparse matrix efficiently.\n# A sparse matrix is a matrix in which most elements are zero.\n# Example: Representing matrix [[0, 0, 3], [0, 0, 0], [0, 5, 0]] using sparse matrix format.\n",
    "regex_matching.py": "# Program to match strings using regular expressions.\n# Regex allows pattern matching, useful for text search and validation.\n# Example: Regex to match an email address pattern.\n",
    "huffman_encoding.py": "# Program to perform Huffman encoding.\n# Huffman encoding is a lossless data compression algorithm.\n# Example: Encoding a string 'ABRACADABRA' using Huffman coding results in a shorter encoded string.\n",
    "wildcard_matching.py": "# Program to check if a string matches a pattern with wildcards.\n# Wildcard matching supports '*' and '?' as placeholders for any characters.\n# Example: Matching 'ab?c*' with 'abcd' returns True.\n",
    "knapsack_01.py": "# Program to solve the 0/1 knapsack problem using dynamic programming.\n# The problem involves selecting items with given weights and values to maximize the total value.\n# Example: Knapsack capacity 10, items with weights [2, 4, 6] and values [3, 5, 6].\n",
    "backtracking.py": "# Program to solve problems using the backtracking algorithm.\n# Backtracking is used to find solutions by exploring all possible candidates.\n# Example: Solving the N-Queens problem using backtracking.\n",
    "fibonacci_memoization.py": "# Program to calculate the nth Fibonacci number using memoization.\n# Memoization stores previously computed results to avoid redundant calculations.\n# Example: Fibonacci number 10 is 55.\n",
    "find_longest_increasing_subsequence.py": "# Program to find the longest increasing subsequence in an array.\n# The subsequence must be in increasing order and not necessarily contiguous.\n# Example: LIS in [10, 9, 2, 5, 3, 7, 101, 18] is [2, 3, 7, 101].\n",
    "edit_distance_dynamic_programming.py": "# Program to compute the edit distance between two strings using dynamic programming.\n# Edit distance is the minimum number of operations required to convert one string to another.\n# Example: Edit distance between 'kitten' and 'sitting' is 3.\n",
    "lcs_recursive.py": "# Program to find the longest common subsequence (LCS) of two strings using recursion.\n# LCS is the longest sequence that can be derived from both strings by deleting characters.\n# Example: LCS of 'abc' and 'ac' is 'ac'.\n",
    "doubly_linked_list.py": "# Program to implement a doubly linked list.\n# A doubly linked list allows traversal in both directions using previous and next pointers.\n# Example: Creating a doubly linked list with elements 1, 2, 3.\n",
    "disjoint_set.py": "# Program to implement a disjoint set (union-find) data structure.\n# Disjoint set is used for tracking a partition of a set into disjoint subsets.\n# Example: Union and find operations on sets of elements.\n",
    "binary_search_tree.py": "# Program to implement a binary search tree (BST).\n# A BST is a binary tree where each node's left child is smaller, and the right child is larger.\n# Example: Inserting elements into a BST and searching for a value.\n",
    "trie_data_structure.py": "# Program to implement a trie data structure.\n# A trie is a tree-like structure that stores strings for fast lookups.\n# Example: Inserting strings into a trie and searching for prefixes.\n",
    "segment_tree.py": "# Program to implement a segment tree.\n# A segment tree is used for efficiently querying range statistics like sum, minimum, or maximum.\n# Example: Building a segment tree for range sum queries.\n",
    "advanced_regex_matching.py": "# Program for advanced regular expression matching.\n# It involves more complex patterns, including grouping, backreferences, and lookaheads.\n# Example: Matching strings using advanced regex patterns for validation.\n",
    "bellman_ford_algorithm.py": "# Program to find the shortest paths from a source node using Bellman-Ford algorithm.\n# Bellman-Ford can handle negative weights and detect negative weight cycles.\n# Example: Shortest path in a graph with negative weights using Bellman-Ford.\n",
    "floyd_warshall_algorithm.py": "# Program to find the shortest paths between all pairs of nodes using Floyd-Warshall algorithm.\n# Floyd-Warshall is a dynamic programming algorithm for all-pairs shortest paths.\n# Example: Finding the shortest paths between all pairs in a weighted graph.\n",
    "kmp_pattern_matching.py": "# Program to implement the Knuth-Morris-Pratt (KMP) pattern matching algorithm.\n# KMP improves string matching by avoiding redundant comparisons.\n# Example: Searching for 'abc' in a string 'abcabcabc'.\n",
    "prim_mst.py": "# Program to find the minimum spanning tree (MST) using Prim's algorithm.\n# Prim's algorithm grows the MST by adding the smallest edge connecting a node to the tree.\n# Example: Finding the MST of a weighted graph using Prim's algorithm.\n",
    "kruskal_mst.py": "# Program to find the minimum spanning tree (MST) using Kruskal's algorithm.\n# Kruskal's algorithm sorts the edges by weight and adds the smallest edge without forming a cycle.\n# Example: Finding the MST of a weighted graph using Kruskal's algorithm.\n",
    "top_k_elements.py": "# Program to find the top K elements in an array.\n# This can be done using a heap or sorting the array and selecting the top K.\n# Example: Top 3 elements in [7, 2, 9, 3, 5] are [9, 7, 5].\n",
    "coin_change_problem.py": "# Program to solve the coin change problem.\n# The problem involves finding the minimum number of coins required to make a certain amount.\n# Example: Coin change for 11 using coins [1, 2, 5] requires 3 coins.\n",
    "matrix_chain_order.py": "# Program to solve the matrix chain multiplication problem.\n# Matrix chain multiplication finds the most efficient order for multiplying a sequence of matrices.\n# Example: Solving for the optimal multiplication order in a sequence of matrices.\n",
    "maximum_subarray_sum.py": "# Program to find the maximum sum of a contiguous subarray (Kadane's Algorithm).\n# The problem can be solved using dynamic programming.\n# Example: Maximum sum subarray in [1, -2, 3, 4, -1] is 7.\n",
    "rat_in_maze.py": "# Program to solve the rat in a maze problem.\n# The rat must find a path from the top-left corner to the bottom-right corner of a maze.\n# Example: Finding a path in a maze using backtracking.\n",
    "flood_fill_algorithm.py": "# Program to implement the flood fill algorithm.\n# Flood fill is used to color connected regions in an image or grid.\n# Example: Filling a region with color in a 2D grid of 0's and 1's.\n",
    "fibonacci_dp.py": "# Program to compute Fibonacci numbers using dynamic programming.\n# This approach avoids redundant computations by storing previously calculated Fibonacci numbers.\n# Example: Fibonacci number 10 is 55.\n",
    "job_sequencing.py": "# Program to solve the job sequencing problem.\n# The goal is to schedule jobs to maximize profit while respecting deadlines.\n# Example: Scheduling jobs with deadlines and profits.\n",
    "lru_cache.py": "# Program to implement an LRU (Least Recently Used) cache.\n# LRU cache stores a fixed number of items and evicts the least recently used item when full.\n# Example: Using an LRU cache to store recent API results.\n",
    "fibonacci_matrix_exponentiation.py": "# Program to compute Fibonacci numbers using matrix exponentiation.\n# Matrix exponentiation allows efficient calculation of Fibonacci numbers in logarithmic time.\n# Example: Fibonacci number 10 is 55 using matrix exponentiation.\n",
    "game_of_life.py": "# Program to simulate Conway's Game of Life.\n# The Game of Life is a cellular automaton where cells live, die, or reproduce based on specific rules.\n# Example: Simulating an initial state and next generation.\n",
    "min_spanning_tree.py": "# Program to find the minimum spanning tree of a graph.\n# The minimum spanning tree connects all nodes with the smallest total edge weight.\n# Example: Finding the MST using Prim's or Kruskal's algorithm.\n",
    "max_sum_subarray.py": "# Program to find the maximum sum of a contiguous subarray.\n# This can be done using Kadane's Algorithm for optimal performance.\n# Example: Maximum sum subarray in [1, -2, 3, 4, -1] is 7.\n",
    "palindrome_partitioning.py": "# Program to partition a string into palindromes.\n# The goal is to find the minimum number of cuts required to divide the string into palindromic substrings.\n# Example: Partition 'aab' into ['aa', 'b'].\n",
    "water_trapping.py": "# Program to calculate the amount of water trapped between bars.\n# Water trapping depends on the heights of the bars and the valleys between them.\n# Example: Water trapped in [0, 1, 0, 2] is 1 unit.\n"
  },
    "Pattern_Programs": {
    "right_triangle_pattern.py": "# Program to print a right triangle pattern.\n# The pattern is printed with stars in the shape of a right triangle.\n# Example: \n# *\n# **\n# ***\n# ****\n",
    "pyramid_pattern.py": "# Program to print a pyramid pattern.\n# The pyramid is symmetric, with spaces and stars arranged to form a triangular shape.\n# Example: \n#    *\n#   ***\n#  *****\n# *******\n",
    "diamond_pattern.py": "# Program to print a diamond pattern.\n# The pattern consists of two symmetrical triangles, one facing up and the other down.\n# Example: \n#   *\n#  ***\n# *****\n#  ***\n#   *\n",
    "square_pattern.py": "# Program to print a square pattern.\n# The square is filled with stars, with the same number of rows and columns.\n# Example: \n# *****\n# *****\n# *****\n",
    "star_pattern.py": "# Program to print a pattern with stars.\n# The pattern varies in shape depending on the number of rows.\n# Example: \n# *\n# **\n# ***\n# ****\n",
    "inverted_triangle_pattern.py": "# Program to print an inverted triangle pattern.\n# The pattern starts wide at the top and narrows downwards.\n# Example: \n# *****\n# ****\n# ***\n# **\n# *\n",
    "hollow_square_pattern.py": "# Program to print a hollow square pattern.\n# The square is made of stars on the borders, with spaces inside.\n# Example: \n# *****\n# *   *\n# *   *\n# *****\n",
    "hollow_pyramid_pattern.py": "# Program to print a hollow pyramid pattern.\n# The pyramid has stars on the borders and spaces inside.\n# Example: \n#    *\n#   * *\n#  *   *\n# *     *\n",
    "zigzag_pattern.py": "# Program to print a zigzag pattern.\n# The zigzag pattern alternates between two lines of stars.\n# Example: \n# * * *\n#  * * *\n# * * *\n",
    "number_pyramid_pattern.py": "# Program to print a number pyramid pattern.\n# The pyramid is printed with numbers instead of stars.\n# Example: \n#     1\n#    121\n#   12321\n#  1234321\n",
    "hourglass_pattern.py": "# Program to print an hourglass pattern.\n# The pattern starts wide at the top and narrows downwards, then widens again.\n# Example: \n# *****\n#  ***\n#   *\n#  ***\n# *****\n",
    "left_triangle_pattern.py": "# Program to print a left triangle pattern.\n# The pattern is printed with stars aligned to the left.\n# Example: \n# *\n# **\n# ***\n# ****\n",
    "right_angle_triangle.py": "# Program to print a right-angle triangle pattern.\n# The right angle is at the bottom-left corner, and stars form the triangle.\n# Example: \n# *\n# **\n# ***\n# ****\n",
    "rhombus_pattern.py": "# Program to print a rhombus pattern.\n# The rhombus is a diamond shape with equal diagonals.\n# Example: \n#    *\n#   ***\n#  *****\n#   ***\n#    *\n",
    "christmas_tree_pattern.py": "# Program to print a Christmas tree pattern.\n# The tree is made of stars and has a trunk.\n# Example: \n#    *\n#   ***\n#  *****\n# *******\n#    | \n",
    "triangle_star_pattern.py": "# Program to print a star triangle pattern.\n# The pattern is a simple triangle formed with stars.\n# Example: \n#   *\n#  ***\n# *****\n",
    "reverse_pyramid_pattern.py": "# Program to print a reverse pyramid pattern.\n# The pyramid starts with a wide base and narrows as it goes upward.\n# Example: \n# *****\n#  ***\n#   *\n",
    "checkerboard_pattern.py": "# Program to print a checkerboard pattern.\n# The pattern alternates between stars and spaces.\n# Example: \n# * * *\n#  * * *\n# * * *\n",
    "rectangle_pattern.py": "# Program to print a rectangle pattern.\n# The rectangle is made of stars with a fixed number of rows and columns.\n# Example: \n# *****\n# *****\n# *****\n",
    "left_right_triangle_pattern.py": "# Program to print a left and right triangle pattern side by side.\n# The pattern consists of two triangles arranged next to each other.\n# Example: \n# *   *\n# **  **\n# *** ***\n",
    "cross_pattern.py": "# Program to print a cross pattern.\n# The cross consists of two intersecting lines of stars.\n# Example: \n#   *\n#   *\n# *****\n#   *\n#   *\n",
    "hollow_diamond_pattern.py": "# Program to print a hollow diamond pattern.\n# The diamond has stars only on the borders, with spaces inside.\n# Example: \n#   *\n#  * *\n# *   *\n#  * *\n#   *\n",
    "sandwich_pattern.py": "# Program to print a sandwich pattern.\n# The pattern consists of a row of stars, followed by rows of spaces and stars.\n# Example: \n# *****\n# *   *\n# *****\n",
    "triangle_with_numbers.py": "# Program to print a triangle pattern with numbers.\n# The triangle has numbers instead of stars, increasing row by row.\n# Example: \n# 1\n# 12\n# 123\n# 1234\n",
    "number_grid_pattern.py": "# Program to print a number grid pattern.\n# The grid is filled with numbers in a matrix-like structure.\n# Example: \n# 1 2 3\n# 4 5 6\n# 7 8 9\n",
    "hollow_star_square.py": "# Program to print a hollow square pattern with stars.\n# The square has stars on the borders and spaces inside.\n# Example: \n# *****\n# *   *\n# *   *\n# *****\n",
    "vertical_triangle_pattern.py": "# Program to print a vertical triangle pattern.\n# The pattern is printed vertically, creating a triangle shape.\n# Example: \n# *\n# **\n# ***\n# ****\n",
    "double_triangle_pattern.py": "# Program to print a double triangle pattern.\n# The pattern consists of two triangles placed side by side.\n# Example: \n# *   *\n# **  **\n# *** ***\n",
    "alphabet_pyramid_pattern.py": "# Program to print an alphabet pyramid pattern.\n# The pyramid uses letters instead of stars.\n# Example: \n#    A\n#   ABA\n#  ABCBA\n# ABCDCA\n",
    "hollow_right_angle_triangle.py": "# Program to print a hollow right angle triangle pattern.\n# The triangle has stars on the borders and spaces inside.\n# Example: \n# *\n# **\n# * \n",
    "inverted_number_pyramid.py": "# Program to print an inverted number pyramid pattern.\n# The pyramid is printed with numbers, starting with the largest number at the top.\n# Example: \n# 12321\n#  121\n#   1\n",
    "zigzag_star_pattern.py": "# Program to print a zigzag pattern with stars.\n# The stars alternate in a zigzag pattern.\n# Example: \n# * * *\n#  * * *\n# * * *\n",
    "hollow_rectangle_pattern.py": "# Program to print a hollow rectangle pattern.\n# The rectangle has stars on the borders and spaces inside.\n# Example: \n# *****\n# *   *\n# *   *\n# *****\n",
    "inverse_star_pyramid.py": "# Program to print an inverse star pyramid pattern.\n# The pyramid starts with a wide base and narrows to the top.\n# Example: \n# *****\n#  ***\n#   *\n",
    "diagonal_star_pattern.py": "# Program to print a diagonal star pattern.\n# The stars are arranged diagonally across the grid.\n# Example: \n# *\n#  *\n#   *\n",
    "hollow_hexagon_pattern.py": "# Program to print a hollow hexagon pattern.\n# The hexagon has stars on the borders with spaces inside.\n# Example: \n#  *****\n# *     *\n#  *****\n",
    "bordered_square_pattern.py": "# Program to print a bordered square pattern.\n# The square is made of stars on the borders with spaces inside.\n# Example: \n# *****\n# *   *\n# *****\n",
    "fibonacci_pattern.py": "# Program to print a Fibonacci pattern.\n# The pattern is based on Fibonacci numbers printed in a grid or sequence.\n# Example: \n# 1\n# 1 1\n# 2 3\n# 5 8\n",
    "hollow_diamond_pattern.py": "# Program to print a hollow diamond pattern (again).\n# The pattern has stars on the borders, with spaces inside.\n# Example: \n#   *\n#  * *\n# *   *\n#  * *\n#   *\n",
    "double_square_pattern.py": "# Program to print a double square pattern.\n# The pattern consists of two squares, one inside the other.\n# Example: \n# *****\n# *   *\n# *****\n# *   *\n# *****\n",
    "multi_star_triangle.py": "# Program to print a multi-star triangle pattern.\n# The pattern has multiple triangles stacked on top of each other.\n# Example: \n# *\n# ***\n# *****\n",
    "hollow_star_triangle.py": "# Program to print a hollow star triangle.\n# The triangle has stars on the borders with spaces inside.\n# Example: \n# *\n# * *\n# *   *\n",
    "ascii_tree_pattern.py": "# Program to print an ASCII tree pattern.\n# The tree is made with ASCII characters, typically stars and spaces.\n# Example: \n#    *\n#   ***\n#  *****\n# *******\n#    | \n",
    "inverted_pyramid_star.py": "# Program to print an inverted pyramid pattern with stars.\n# The pyramid starts with a wide base and narrows upwards.\n# Example: \n# *****\n#  ***\n#   *\n",
    "hollow_right_triangle.py": "# Program to print a hollow right triangle pattern.\n# The triangle has stars on the borders with spaces inside.\n# Example: \n# *\n# **\n# * \n",
    "reverse_inverted_triangle.py": "# Program to print a reverse inverted triangle pattern.\n# The triangle starts with a narrow top and widens as it goes down.\n# Example: \n# *\n# **\n# ***\n# ****\n",
    "diamond_with_numbers.py": "# Program to print a diamond pattern with numbers.\n# The numbers form a symmetrical diamond shape.\n# Example: \n#   1\n#  121\n# 12321\n#  121\n#   1\n",
    "nested_pyramid_pattern.py": "# Program to print a nested pyramid pattern.\n# The pattern has multiple pyramids within each other.\n# Example: \n#    *\n#   ***\n#  *****\n#   ***\n#    *\n",
    "hollow_half_diamond.py": "# Program to print a hollow half-diamond pattern.\n# The half-diamond has stars only on the borders.\n# Example: \n# *\n# * *\n# *   *\n# * *\n# *\n",
    "star_wave_pattern.py": "# Program to print a star wave pattern.\n# The wave consists of alternating lines of stars and spaces.\n# Example: \n# * * *\n#  * * *\n# * * *\n",
    "solid_pyramid_pattern.py": "# Program to print a solid pyramid pattern.\n# The pyramid is fully filled with stars.\n# Example: \n#    *\n#   ***\n#  *****\n# *******\n"
  }
}

# Function to create or replace files in the specified directories
# Function to create or replace files in the specified directories
def create_or_replace_files():
    for category, files in programs.items():
        # Create the directory if it doesn't exist, replace if it does
        if os.path.exists(category):
            # Remove the existing directory and its contents
            for filename in os.listdir(category):
                file_path = os.path.join(category, filename)
                if os.path.isfile(file_path):
                    os.remove(file_path)
                elif os.path.isdir(file_path):
                    os.rmdir(file_path)
        else:
            # Create the directory if it doesn't exist
            os.makedirs(category)

        # Create each .py file in the directory
        for file_name, comments in files.items():
            file_path = os.path.join(category, file_name)
            with open(file_path, "w", encoding='utf-8') as f:  # Added encoding='utf-8'
                f.write(comments)
                print(f"Created/Updated {file_path}")

# Run the function to create or replace files
create_or_replace_files()
